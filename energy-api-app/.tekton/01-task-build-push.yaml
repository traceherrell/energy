######################################################################
# TASK 1: Build .NET App and Push to Quay.io
#
# This Task uses buildah to build a container image from a Dockerfile
# and push it to a container registry. It then outputs the exact
# image digest (SHA256 hash) for use in later tasks.
######################################################################
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dotnet-build-push
spec:
  description: >-
    Builds a .NET application using a Dockerfile and pushes the
    resulting image to a container registry.
  params:
    - name: IMAGE_URL
      description: The URL of the image to build and push (e.g., quay.io/your-org/your-app).
    - name: DOCKERFILE
      description: The path to the Dockerfile.
      default: ./Dockerfile
  workspaces:
    - name: source
      description: A workspace containing the source code.
  results:
    - name: IMAGE_DIGEST
      description: The exact digest of the pushed image.
  steps:
    - name: build-and-push
      image: quay.io/buildah/stable:v1.28.0
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -e

        echo "Building image $(params.IMAGE_URL)..."
        buildah bud --tls-verify=true -f "$(params.DOCKERFILE)" -t "$(params.IMAGE_URL):latest" .

        echo "Pushing image $(params.IMAGE_URL) to registry..."
        buildah push --tls-verify=true "$(params.IMAGE_URL):latest" "docker://$(params.IMAGE_URL):latest"

        echo "Inspecting image to get digest..."
        DIGEST=$(buildah inspect --type image --format '{{.Digest}}' "$(params.IMAGE_URL):latest")
        if [ -z "$DIGEST" ]; then
          echo "Could not retrieve image digest. Failing."
          exit 1
        fi

        echo "Image digest is $DIGEST"
        echo -n "$DIGEST" | tee $(results.IMAGE_DIGEST.path)
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: varlibc
          mountPath: /var/lib/containers
  volumes:
    - name: varlibc
      emptyDir: {}
